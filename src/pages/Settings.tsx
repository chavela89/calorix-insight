import React, { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { Switch } from "@/components/ui/switch";
import { Badge } from "@/components/ui/badge";
import { Settings as SettingsIcon, Bell, CreditCard, Smartphone, Monitor, Globe, LogOut, HelpCircle, Languages, ChevronRight, Apple } from "lucide-react";
import { toast } from "sonner";
import { useTheme } from "@/context/ThemeContext";
import { ThemeType } from "@/types";

const languagesData = [
  { code: "ru", name: "–†—É—Å—Å–∫–∏–π", flag: "üá∑üá∫" },
  { code: "en", name: "English", flag: "üá∫üá∏" },
  { code: "es", name: "Espa√±ol", flag: "üá™üá∏" },
  { code: "fr", name: "Fran√ßais", flag: "üá´üá∑" },
  { code: "de", name: "Deutsch", flag: "üá©üá™" },
  { code: "pt", name: "Portugu√™s", flag: "üáµüáπ" },
  { code: "it", name: "Italiano", flag: "üáÆüáπ" },
  { code: "tr", name: "T√ºrk√ße", flag: "üáπüá∑" },
  { code: "el", name: "ŒïŒªŒªŒ∑ŒΩŒπŒ∫Œ¨", flag: "üá¨üá∑" },
  { code: "nl", name: "Nederlands", flag: "üá≥üá±" },
  { code: "ar", name: "ÿßŸÑÿπÿ±ÿ®Ÿäÿ©", flag: "üá¶üá™" },
  { code: "zh", name: "‰∏≠Êñá", flag: "üá®üá≥" },
  { code: "ja", name: "Êó•Êú¨Ë™û", flag: "üáØüáµ" },
  { code: "ko", name: "ÌïúÍµ≠Ïñ¥", flag: "üá∞üá∑" },
  { code: "vi", name: "Ti·∫øng Vi·ªát", flag: "üáªüá≥" },
  { code: "th", name: "‡πÑ‡∏ó‡∏¢", flag: "üáπüá≠" },
  { code: "hi", name: "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä", flag: "üáÆüá≥" },
  { code: "bn", name: "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ", flag: "üáßüá©" },
  { code: "jv", name: "Basa Jawa", flag: "üáÆüá©" },
  { code: "kk", name: "“ö–∞–∑–∞“õ", flag: "üá∞üáø" },
  { code: "uk", name: "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", flag: "üá∫üá¶" },
  { code: "be", name: "–ë–µ–ª–∞—Ä—É—Å–∫–∞—è", flag: "üáßüáæ" },
  { code: "sr", name: "–°—Ä–ø—Å–∫–∏", flag: "üá∑üá∏" },
  { code: "pl", name: "Polski", flag: "üáµüá±" },
  { code: "hu", name: "Magyar", flag: "üá≠üá∫" },
  { code: "ro", name: "Rom√¢nƒÉ", flag: "üá∑üá¥" },
  { code: "az", name: "Az…ôrbaycan", flag: "üá¶üáø" },
  { code: "hy", name: "’Ä’°’µ’•÷Ä’•’∂", flag: "üá¶üá≤" },
  { code: "ka", name: "·É•·Éê·É†·Éó·É£·Éö·Éò", flag: "üá¨üá™" },
  { code: "cs", name: "ƒåe≈°tina", flag: "üá®üáø" },
  { code: "sk", name: "Slovenƒçina", flag: "üá∏üá∞" },
  { code: "lt", name: "Lietuvi≈≥", flag: "üá±üáπ" },
  { code: "lv", name: "Latvie≈°u", flag: "üá±üáª" },
  { code: "et", name: "Eesti", flag: "üá™üá™" },
  { code: "uz", name: "O'zbek", flag: "üá∫üáø" },
  { code: "ky", name: "–ö—ã—Ä–≥—ã–∑—á–∞", flag: "üá∞üá¨" },
  { code: "tk", name: "T√ºrkmen√ße", flag: "üáπüá≤" },
];

const regionsData = [
  { code: "ru", name: "–†–æ—Å—Å–∏—è", currency: "RUB", symbol: "‚ÇΩ" },
  { code: "us", name: "United States", currency: "USD", symbol: "$" },
  { code: "eu", name: "European Union", currency: "EUR", symbol: "‚Ç¨" },
  { code: "gb", name: "United Kingdom", currency: "GBP", symbol: "¬£" },
  { code: "ca", name: "Canada", currency: "CAD", symbol: "CA$" },
  { code: "au", name: "Australia", currency: "AUD", symbol: "A$" },
  { code: "jp", name: "Japan", currency: "JPY", symbol: "¬•" },
  { code: "cn", name: "China", currency: "CNY", symbol: "¬•" },
  { code: "in", name: "India", currency: "INR", symbol: "‚Çπ" },
  { code: "br", name: "Brazil", currency: "BRL", symbol: "R$" },
  { code: "za", name: "South Africa", currency: "ZAR", symbol: "R" },
  { code: "mx", name: "Mexico", currency: "MXN", symbol: "Mex$" },
  { code: "kr", name: "South Korea", currency: "KRW", symbol: "‚Ç©" },
  { code: "sg", name: "Singapore", currency: "SGD", symbol: "S$" },
  { code: "tr", name: "Turkey", currency: "TRY", symbol: "‚Ç∫" },
  { code: "ae", name: "United Arab Emirates", currency: "AED", symbol: "ÿØ.ÿ•" },
  { code: "sa", name: "Saudi Arabia", currency: "SAR", symbol: "Ô∑º" },
  { code: "th", name: "Thailand", currency: "THB", symbol: "‡∏ø" },
  { code: "ua", name: "Ukraine", currency: "UAH", symbol: "‚Ç¥" },
  { code: "kz", name: "Kazakhstan", currency: "KZT", symbol: "‚Ç∏" },
  { code: "pl", name: "Poland", currency: "PLN", symbol: "z≈Ç" },
  { code: "se", name: "Sweden", currency: "SEK", symbol: "kr" },
  { code: "cz", name: "Czech Republic", currency: "CZK", symbol: "Kƒç" },
  { code: "hu", name: "Hungary", currency: "HUF", symbol: "Ft" },
  { code: "ro", name: "Romania", currency: "RON", symbol: "lei" },
];

const timezonesData = [
  { code: "gmt-12", name: "GMT-12:00", cities: "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –ª–∏–Ω–∏—è —Å–º–µ–Ω—ã –¥–∞—Ç" },
  { code: "gmt-11", name: "GMT-11:00", cities: "–°–∞–º–æ–∞, –ù–∏—É—ç" },
  { code: "gmt-10", name: "GMT-10:00", cities: "–ì–∞–≤–∞–π–∏" },
  { code: "gmt-9", name: "GMT-09:00", cities: "–ê–ª—è—Å–∫–∞" },
  { code: "gmt-8", name: "GMT-08:00", cities: "–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å, –í–∞–Ω–∫—É–≤–µ—Ä" },
  { code: "gmt-7", name: "GMT-07:00", cities: "–î–µ–Ω–≤–µ—Ä, –§–µ–Ω–∏–∫—Å" },
  { code: "gmt-6", name: "GMT-06:00", cities: "–ß–∏–∫–∞–≥–æ, –ú–µ—Ö–∏–∫–æ" },
  { code: "gmt-5", name: "GMT-05:00", cities: "–ù—å—é-–ô–æ—Ä–∫, –¢–æ—Ä–æ–Ω—Ç–æ" },
  { code: "gmt-4", name: "GMT-04:00", cities: "–°–∞–Ω—Ç—å—è–≥–æ, –ö–∞—Ä–∞–∫–∞—Å" },
  { code: "gmt-3", name: "GMT-03:00", cities: "–ë—É—ç–Ω–æ—Å-–ê–π—Ä–µ—Å, –°–∞–Ω-–ü–∞—É–ª—É" },
  { code: "gmt-2", name: "GMT-02:00", cities: "–°—Ä–µ–¥–Ω–µ–∞—Ç–ª–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è" },
  { code: "gmt-1", name: "GMT-01:00", cities: "–ê–∑–æ—Ä—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞" },
  { code: "gmt0", name: "GMT+00:00", cities: "–õ–æ–Ω–¥–æ–Ω, –î—É–±–ª–∏–Ω, –õ–∏—Å—Å–∞–±–æ–Ω" },
  { code: "gmt+1", name: "GMT+01:00", cities: "–ë–µ—Ä–ª–∏–Ω, –ü–∞—Ä–∏–∂, –†–∏–º" },
  { code: "gmt+2", name: "GMT+02:00", cities: "–ê—Ñ–∏–Ω—ã, –ö–∞–∏—Ä, –ö–∏–µ–≤" },
  { code: "gmt+3", name: "GMT+03:00", cities: "–ú–æ—Å–∫–≤–∞, –ú–∏–Ω—Å–∫" },
  { code: "gmt+4", name: "GMT+04:00", cities: "–ë–∞–∫—É, –¢–±–∏–ª–∏—Å–∏, –ï—Ä–µ–≤–∞–Ω" },
  { code: "gmt+5", name: "GMT+05:00", cities: "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, –¢–∞—à–∫–µ–Ω—Ç" },
  { code: "gmt+6", name: "GMT+06:00", cities: "–ê–ª–º–∞—Ç—ã, –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫" },
  { code: "gmt+7", name: "GMT+07:00", cities: "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫, –ë–∞–Ω–≥–∫–æ–∫" },
  { code: "gmt+8", name: "GMT+08:00", cities: "–ì–æ–Ω–∫–æ–Ω–≥, –ü–µ–∫–∏–Ω, –ò—Ä–∫—É—Ç—Å–∫" },
  { code: "gmt+9", name: "GMT+09:00", cities: "–¢–æ–∫–∏–æ, –°–µ—É–ª, –Ø–∫—É—Ç—Å–∫" },
  { code: "gmt+10", name: "GMT+10:00", cities: "–°–∏–¥–Ω–µ–π, –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫" },
  { code: "gmt+11", name: "GMT+11:00", cities: "–ú–∞–≥–∞–¥–∞–Ω, –°–æ–ª–æ–º–æ–Ω–æ–≤—ã –û—Å—Ç—Ä–æ–≤–∞" },
  { code: "gmt+12", name: "GMT+12:00", cities: "–§–∏–¥–∂–∏, –ú–∞—Ä—à–∞–ª–ª–æ–≤—ã –û—Å—Ç—Ä–æ–≤–∞" },
  { code: "gmt+13", name: "GMT+13:00", cities: "–°–∞–º–æ–∞, –¢–æ–Ω–≥–∞" },
  { code: "gmt+14", name: "GMT+14:00", cities: "–û—Å—Ç—Ä–æ–≤ –†–æ–∂–¥–µ—Å—Ç–≤–∞ (–ö–∏—Ä–∏–±–∞—Ç–∏)" },
];

const exchangeRates = {
  RUB: 1,
  USD: 0.011,
  EUR: 0.01,
  GBP: 0.0086,
  CAD: 0.015,
  AUD: 0.016,
  JPY: 1.64,
  CNY: 0.079,
  INR: 0.91,
  BRL: 0.056,
  ZAR: 0.20,
  MXN: 0.18,
  KRW: 14.67,
  SGD: 0.015,
  TRY: 0.35,
  AED: 0.04,
  SAR: 0.041,
  THB: 0.39,
  UAH: 0.42,
  KZT: 4.92,
  PLN: 0.043,
  SEK: 0.11,
  CZK: 0.25,
  HUF: 3.93,
  RON: 0.05,
};

const translations = {
  ru: {
    settings: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    customize: "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é",
    sections: "–†–∞–∑–¥–µ–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫",
    account: "–ê–∫–∫–∞—É–Ω—Ç",
    appearance: "–í–Ω–µ—à–Ω–∏–π –≤–∏–¥",
    notifications: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
    subscription: "–ü–æ–¥–ø–∏—Å–∫–∞",
    language: "–Ø–∑—ã–∫",
    help: "–ü–æ–º–æ—â—å",
    logout: "–í—ã–π—Ç–∏",
    accountSettings: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞",
    profileSettings: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏ –∞–∫–∫–∞—É–Ω—Ç–∞",
    accountStatus: "–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞",
    currentPlan: "–í–∞—à —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏",
    freePlan: "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω",
    emailNotifications: "Email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
    receiveEmails: "–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –ø–æ—á—Ç—É",
    syncData: "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö",
    autoSync: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏",
    interfaceAppearance: "–í–Ω–µ—à–Ω–∏–π –≤–∏–¥",
    customizeAppearance: "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
    theme: "–¢–µ–º–∞",
    layout: "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
    light: "–°–≤–µ—Ç–ª–∞—è",
    dark: "–¢–µ–º–Ω–∞—è",
    system: "–°–∏—Å—Ç–µ–º–Ω–∞—è",
    compactMode: "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º",
    reducePadding: "–£–º–µ–Ω—å—à–∏—Ç—å –æ—Ç—Å—Ç—É–ø—ã –∏ —Ä–∞–∑–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
    sidebar: "–ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å",
    showSidebar: "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
    animations: "–ê–Ω–∏–º–∞—Ü–∏–∏",
    enableAnimations: "–í–∫–ª—é—á–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
    notificationSettings: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
    customizeNotifications: "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
    pushNotifications: "Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
    receivePush: "–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ",
    mealReminders: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–∏—Ç–∞–Ω–∏–∏",
    getMealReminders: "–ü–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏",
    achievements: "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
    achievementNotifications: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö",
    weeklyReports: "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã",
    getWeeklyReports: "–ü–æ–ª—É—á–∞—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ",
    subscriptionBilling: "–ü–æ–¥–ø–∏—Å–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞",
    manageSubscription: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π –∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π",
    currentPlanTitle: "–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω",
    active: "–ê–∫—Ç–∏–≤–µ–Ω",
    basicTracking: "–ë–∞–∑–æ–≤–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π",
    limitedHistory: "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏",
    basicReports: "–û—Å–Ω–æ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã",
    availablePlans: "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã",
    premium: "–ü—Ä–µ–º–∏—É–º",
    month: "–º–µ—Å—è—Ü",
    advancedAnalytics: "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
    aiRecommendations: "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ AI",
    unlimitedHistory: "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è",
    noAds: "–ë–µ–∑ —Ä–µ–∫–ª–∞–º—ã",
    subscribe: "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
    yearlyPlan: "–ì–æ–¥–æ–≤–æ–π –ø–ª–∞–Ω",
    year: "–≥–æ–¥",
    savings: "–≠–∫–æ–Ω–æ–º–∏—è 40%",
    allPremiumFeatures: "–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ü—Ä–µ–º–∏—É–º",
    prioritySupport: "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
    dataExport: "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö",
    languageRegion: "–Ø–∑—ã–∫ –∏ —Ä–µ–≥–∏–æ–Ω",
    customizeLanguage: "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —è–∑—ã–∫ –∏ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",
    appLanguage: "–Ø–∑—ã–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
    region: "–†–µ–≥–∏–æ–Ω",
    timezone: "–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
    saveSettings: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
    helpSupport: "–ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
    getHelp: "–ü–æ–ª—É—á–∏—Ç–µ –ø–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
    supportCenter: "–¶–µ–Ω—Ç—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
    faqInstructions: "–û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
    contactUs: "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏",
    contactSupport: "–ù–∞–ø–∏—à–∏—Ç–µ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã",
    tutorials: "–û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
    tutorialDescription: "–í–∏–¥–µ–æ—É—Ä–æ–∫–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
    reportProblem: "–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ",
    reportBugs: "–°–æ–æ–±—â–∏—Ç–µ –Ω–∞–º –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö",
    appVersion: "–í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: 1.0.0"
  },
  en: {
    settings: "Settings",
    customize: "Customize the application to your liking",
    sections: "Setting Sections",
    account: "Account",
    appearance: "Appearance",
    notifications: "Notifications",
    subscription: "Subscription",
    language: "Language",
    help: "Help",
    logout: "Logout",
    accountSettings: "Account Settings",
    profileSettings: "Manage your profile and account settings",
    accountStatus: "Account Status",
    currentPlan: "Your current subscription plan",
    freePlan: "Free Plan",
    emailNotifications: "Email Notifications",
    receiveEmails: "Receive notifications via email",
    syncData: "Data Synchronization",
    autoSync: "Automatically synchronize data between devices",
    interfaceAppearance: "Appearance",
    customizeAppearance: "Customize the look of the application",
    theme: "Theme",
    layout: "Layout",
    light: "Light",
    dark: "Dark",
    system: "System",
    compactMode: "Compact Mode",
    reducePadding: "Reduce spacing and size of interface elements",
    sidebar: "Sidebar",
    showSidebar: "Show sidebar by default",
    animations: "Animations",
    enableAnimations: "Enable interface animations",
    notificationSettings: "Notifications",
    customizeNotifications: "Configure notification parameters",
    pushNotifications: "Push Notifications",
    receivePush: "Receive notifications in browser",
    mealReminders: "Meal Reminders",
    getMealReminders: "Receive meal reminders",
    achievements: "Achievements",
    achievementNotifications: "Notifications about earned achievements",
    weeklyReports: "Weekly Reports",
    getWeeklyReports: "Receive weekly progress reports",
    subscriptionBilling: "Subscription & Billing",
    manageSubscription: "Manage subscription and payment information",
    currentPlanTitle: "Current Plan",
    active: "Active",
    basicTracking: "Basic calorie tracking",
    limitedHistory: "Limited meal history",
    basicReports: "Basic reports",
    availablePlans: "Available Plans",
    premium: "Premium",
    month: "month",
    advancedAnalytics: "Advanced analytics",
    aiRecommendations: "Personal AI recommendations",
    unlimitedHistory: "Unlimited history",
    noAds: "No advertisements",
    subscribe: "Subscribe",
    yearlyPlan: "Yearly Plan",
    year: "year",
    savings: "Save 40%",
    allPremiumFeatures: "All Premium features",
    prioritySupport: "Priority support",
    dataExport: "Data export",
    languageRegion: "Language & Region",
    customizeLanguage: "Customize language and regional settings",
    appLanguage: "Application Language",
    region: "Region",
    timezone: "Timezone",
    saveSettings: "Save Settings",
    helpSupport: "Help & Support",
    getHelp: "Get help using the application",
    supportCenter: "Support Center",
    faqInstructions: "Answers to frequently asked questions and instructions",
    contactUs: "Contact Us",
    contactSupport: "Write to support if you have problems",
    tutorials: "Tutorials",
    tutorialDescription: "Video tutorials and instructions on using the application",
    reportProblem: "Report a Problem",
    reportBugs: "Report bugs or issues to us",
    appVersion: "App Version: 1.0.0"
  },
};

const Settings = () => {
  const { theme, setTheme } = useTheme();
  const [currentLanguage, setCurrentLanguage] = useState("ru");
  const [t, setT] = useState(translations.ru);

  useEffect(() => {
    const savedLanguage = localStorage.getItem("language") || "ru";
    setCurrentLanguage(savedLanguage);
    setT(translations[savedLanguage] || translations.ru);
    
    document.documentElement.lang = savedLanguage;
  }, []);

  const [notifications, setNotifications] = useState({
    email: true,
    sync: true,
    push: true,
    mealReminders: true,
    achievements: true,
    weeklyReports: true
  });

  const [interfaceSettings, setInterfaceSettings] = useState({
    compact: false,
    sidebar: true,
    animations: true
  });

  const [language, setLanguage] = useState(() => {
    return localStorage.getItem("language") || "ru";
  });
  const [region, setRegion] = useState(() => {
    return localStorage.getItem("region") || "ru";
  });
  const [timezone, setTimezone] = useState(() => {
    return localStorage.getItem("timezone") || "gmt+3";
  });

  const [currency, setCurrency] = useState({
    code: "RUB",
    symbol: "‚ÇΩ"
  });

  useEffect(() => {
    const selectedRegion = regionsData.find(r => r.code === region);
    if (selectedRegion) {
      setCurrency({
        code: selectedRegion.currency,
        symbol: selectedRegion.symbol
      });
    }
  }, [region]);

  const calculatePrice = (priceInRub: number) => {
    const rate = exchangeRates[currency.code as keyof typeof exchangeRates] || 1;
    const convertedPrice = (priceInRub * rate).toFixed(2);
    if (currency.code === "JPY" || currency.code === "KRW") {
      return Math.round(parseFloat(convertedPrice));
    }
    return convertedPrice;
  };

  const handleToggle = (setting: keyof typeof notifications) => {
    setNotifications(prev => {
      const newValue = !prev[setting];
      toast.success(`${newValue ? "–í–∫–ª—é—á–µ–Ω–æ" : "–û—Ç–∫–ª—é—á–µ–Ω–æ"}`, {
        description: `–ù–∞—Å—Ç—Ä–æ–π–∫–∞ "${setting}" ${newValue ? "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" : "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"}`
      });
      return {
        ...prev,
        [setting]: newValue
      };
    });
  };

  const handleInterfaceToggle = (setting: keyof typeof interfaceSettings) => {
    setInterfaceSettings(prev => {
      const newValue = !prev[setting];
      toast.success(`${newValue ? "–í–∫–ª—é—á–µ–Ω–æ" : "–û—Ç–∫–ª—é—á–µ–Ω–æ"}`, {
        description: `–ù–∞—Å—Ç—Ä–æ–π–∫–∞ "${setting}" ${newValue ? "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" : "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"}`
      });
      return {
        ...prev,
        [setting]: newValue
      };
    });
  };

  const handleThemeChange = (newTheme: ThemeType) => {
    setTheme(newTheme);
    toast.success(t.theme + " " + t.active, {
      description: `${
        newTheme === "light" 
          ? t.light 
          : newTheme === "dark" 
            ? t.dark 
            : t.system
      }`
    });
  };

  const handleLogout = () => {
    toast.info("–í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞", {
      description: "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"
    });
  };

  const handleSubscribe = (plan: string) => {
    toast.success("–ü–æ–¥–ø–∏—Å–∫–∞", {
      description: `–í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –ø–æ–¥–ø–∏—Å–∫–∏ "${plan}"`
    });
  };

  const handleSaveLanguage = () => {
    localStorage.setItem("language", language);
    localStorage.setItem("region", region);
    localStorage.setItem("timezone", timezone);
    
    setCurrentLanguage(language);
    setT(translations[language as keyof typeof translations] || translations.en);
    
    toast.success(t.saveSettings, {
      description: t.customizeLanguage
    });
    
    setTimeout(() => {
      window.location.reload();
    }, 1000);
  };

  const handleSectionClick = (section: string) => {
    toast.info(`–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞–∑–¥–µ–ª—É "${section}"`, {
      description: `–í—ã–±—Ä–∞ÔøΩÔøΩ —Ä–∞–∑–¥–µ–ª "${section}" –Ω–∞—Å—Ç—Ä–æ–µ–∫`
    });
  };

  return (
    <div className="container mx-auto">
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-2">{t.settings}</h1>
        <p className="text-muted-foreground">{t.customize}</p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        <div className="lg:col-span-1">
          <Card className="mb-6">
            <div className="p-4 border-b">
              <h3 className="font-medium">{t.sections}</h3>
            </div>
            <CardContent className="p-0">
              <nav className="flex flex-col">
                <a href="#account" className="flex items-center justify-between p-4 hover:bg-muted/50 transition-colors rounded-md" onClick={() => handleSectionClick(t.account)}>
                  <div className="flex items-center gap-3">
                    <SettingsIcon className="h-5 w-5 text-primary" />
                    <span>{t.account}</span>
                  </div>
                  <ChevronRight className="h-4 w-4 text-muted-foreground" />
                </a>
                <a href="#appearance" className="flex items-center justify-between p-4 hover:bg-muted/50 transition-colors rounded-md" onClick={() => handleSectionClick(t.appearance)}>
                  <div className="flex items-center gap-3">
                    <Monitor className="h-5 w-5 text-primary" />
                    <span>{t.appearance}</span>
                  </div>
                  <ChevronRight className="h-4 w-4 text-muted-foreground" />
                </a>
                <a href="#notifications" className="flex items-center justify-between p-4 hover:bg-muted/50 transition-colors rounded-md" onClick={() => handleSectionClick(t.notifications)}>
                  <div className="flex items-center gap-3">
                    <Bell className="h-5 w-5 text-primary" />
                    <span>{t.notifications}</span>
                  </div>
                  <ChevronRight className="h-4 w-4 text-muted-foreground" />
                </a>
                <a href="#billing" className="flex items-center justify-between p-4 hover:bg-muted/50 transition-colors rounded-md" onClick={() => handleSectionClick(t.subscription)}>
                  <div className="flex items-center gap-3">
                    <CreditCard className="h-5 w-5 text-primary" />
                    <span>{t.subscription}</span>
                  </div>
                  <ChevronRight className="h-4 w-4 text-muted-foreground" />
                </a>
                <a href="#language" className="flex items-center justify-between p-4 hover:bg-muted/50 transition-colors rounded-md" onClick={() => handleSectionClick(t.language)}>
                  <div className="flex items-center gap-3">
                    <Globe className="h-5 w-5 text-primary" />
                    <span>{t.language}</span>
                  </div>
                  <ChevronRight className="h-4 w-4 text-muted-foreground" />
                </a>
                <a href="#help" className="flex items-center justify-between p-4 hover:bg-muted/50 transition-colors rounded-md" onClick={() => handleSectionClick(t.help)}>
                  <div className="flex items-center gap-3">
                    <HelpCircle className="h-5 w-5 text-primary" />
                    <span>{t.help}</span>
                  </div>
                  <ChevronRight className="h-4 w-4 text-muted-foreground" />
                </a>
              </nav>
            </CardContent>
            <div className="p-4 border-t">
              <Button variant="ghost" className="w-full text-destructive justify-start" onClick={handleLogout}>
                <LogOut className="h-4 w-4 mr-2" />
                {t.logout}
              </Button>
            </div>
          </Card>
        </div>

        <div className="lg:col-span-3">
          <Card className="mb-6" id="account">
            <CardHeader>
              <CardTitle>{t.accountSettings}</CardTitle>
              <CardDescription>{t.profileSettings}</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center justify-between">
                <div>
                  <h4 className="text-sm font-medium">{t.accountStatus}</h4>
                  <p className="text-xs text-muted-foreground">{t.currentPlan}</p>
                </div>
                <Badge variant="outline">{t.freePlan}</Badge>
              </div>

              <Separator />

              <div className="flex items-center justify-between">
                <div>
                  <h4 className="text-sm font-medium">{t.emailNotifications}</h4>
                  <p className="text-xs text-muted-foreground">{t.receiveEmails}</p>
                </div>
                <Switch checked={notifications.email} onCheckedChange={() => handleToggle('email')} />
              </div>

              <div className="flex items-center justify-between">
                <div>
                  <h4 className="text-sm font-medium">{t.syncData}</h4>
                  <p className="text-xs text-muted-foreground">{t.autoSync}</p>
                </div>
                <Switch checked={notifications.sync} onCheckedChange={() => handleToggle('sync')} />
              </div>
            </CardContent>
          </Card>

          <Card className="mb-6" id="appearance">
            <CardHeader>
              <CardTitle>{t.appearance}</CardTitle>
              <CardDescription>{t.customizeAppearance}</CardDescription>
            </CardHeader>
            <CardContent>
              <Tabs defaultValue="theme">
                <TabsList className="mb-4">
                  <TabsTrigger value="theme">{t.theme}</TabsTrigger>
                  <TabsTrigger value="layout">{t.layout}</TabsTrigger>
                </TabsList>

                <TabsContent value="theme" className="space-y-4">
                  <div className="grid grid-cols-3 gap-4">
                    <div className="flex flex-col items-center gap-2">
                      <div className="w-full h-24 rounded-md bg-white border border-border flex items-center justify-center">
                        <span className="text-sm font-medium text-black">{t.light}</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <input 
                          type="radio" 
                          name="theme" 
                          id="light" 
                          checked={theme === "light"}
                          onChange={() => handleThemeChange("light")}
                        />
                        <label htmlFor="light" className="text-sm">{t.light}</label>
                      </div>
                    </div>

                    <div className="flex flex-col items-center gap-2">
                      <div className="w-full h-24 rounded-md bg-neutral-900 border border-border flex items-center justify-center">
                        <span className="text-sm font-medium text-white">{t.dark}</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <input 
                          type="radio" 
                          name="theme" 
                          id="dark" 
                          checked={theme === "dark"}
                          onChange={() => handleThemeChange("dark")}
                        />
                        <label htmlFor="dark" className="text-sm">{t.dark}</label>
                      </div>
                    </div>

                    <div className="flex flex-col items-center gap-2">
                      <div className="w-full h-24 rounded-md bg-gradient-to-b from-white to-neutral-900 border border-border flex items-center justify-center">
                        <span className="text-sm font-medium text-black">{t.system}</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <input 
                          type="radio" 
                          name="theme" 
                          id="system" 
                          checked={theme === "system"}
                          onChange={() => handleThemeChange("system")}
                        />
                        <label htmlFor="system" className="text-sm">{t.system}</label>
                      </div>
                    </div>
                  </div>
                </TabsContent>

                <TabsContent value="layout" className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <h4 className="text-sm font-medium">{t.compactMode}</h4>
                      <p className="text-xs text-muted-foreground">{t.reducePadding}</p>
                    </div>
                    <Switch 
                      checked={interfaceSettings.compact} 
                      onCheckedChange={() => handleInterfaceToggle('compact')}
                    />
                  </div>

                  <div className="flex items-center justify-between">
                    <div>
                      <h4 className="text-sm font-medium">{t.sidebar}</h4>
                      <p className="text-xs text-muted-foreground">{t.showSidebar}</p>
                    </div>
                    <Switch 
                      checked={interfaceSettings.sidebar} 
                      onCheckedChange={() => handleInterfaceToggle('sidebar')}
                    />
                  </div>

                  <div className="flex items-center justify-between">
                    <div>
                      <h4 className="text-sm font-medium">{t.animations}</h4>
                      <p className="text-xs text-muted-foreground">{t.enableAnimations}</p>
                    </div>
                    <Switch 
                      checked={interfaceSettings.animations} 
                      onCheckedChange={() => handleInterfaceToggle('animations')}
                    />
                  </div>
                </TabsContent>
              </Tabs>
            </CardContent>
          </Card>

          <Card className="mb-6" id="notifications">
            <CardHeader>
              <CardTitle>{t.notifications}</CardTitle>
              <CardDescription>{t.customizeNotifications}</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center justify-between">
                <div>
                  <h4 className="text-sm font-medium">{t.pushNotifications}</h4>
                  <p className="text-xs text-muted-foreground">{t.receivePush}</p>
                </div>
                <Switch checked={notifications.push} onCheckedChange={() => handleToggle('push')} />
              </div>

              <div className="flex items-center justify-between">
                <div>
                  <h4 className="text-sm font-medium">{t.mealReminders}</h4>
                  <p className="text-xs text-muted-foreground">{t.getMealReminders}</p>
                </div>
                <Switch checked={notifications.mealReminders} onCheckedChange={() => handleToggle('mealReminders')} />
              </div>

              <div className="flex items-center justify-between">
                <div>
                  <h4 className="text-sm font-medium">{t.achievements}</h4>
                  <p className="text-xs text-muted-foreground">{t.achievementNotifications}</p>
                </div>
                <Switch checked={notifications.achievements} onCheckedChange={() => handleToggle('achievements')} />
              </div>

              <div className="flex items-center justify-between">
                <div>
                  <h4 className="text-sm font-medium">{t.weeklyReports}</h4>
                  <p className="text-xs text-muted-foreground">{t.getWeeklyReports}</p>
                </div>
                <Switch checked={notifications.weeklyReports} onCheckedChange={() => handleToggle('weeklyReports')} />
              </div>
            </CardContent>
          </Card>

          <Card className="mb-6" id="billing">
            <CardHeader>
              <CardTitle>{t.subscriptionBilling}</CardTitle>
              <CardDescription>{t.manageSubscription}</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="mb-6 p-4 border rounded-md">
                <div className="flex justify-between items-start mb-4">
                  <div>
                    <h4 className="font-medium">{t.currentPlanTitle}</h4>
                    <p className="text-sm text-muted-foreground">{t.currentPlan}</p>
                  </div>
                  <Badge variant="outline">{t.active}</Badge>
                </div>
                <div className="space-y-2">
                  <div className="flex items-center gap-2">
                    <span className="text-primary">‚úì</span>
                    <span className="text-sm">{t.basicTracking}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <span className="text-primary">‚úì</span>
                    <span className="text-sm">{t.limitedHistory}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <span className="text-primary">‚úì</span>
                    <span className="text-sm">{t.basicReports}</span>
                  </div>
                </div>
              </div>

              <h4 className="font-medium mb-4">{t.availablePlans}</h4>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                <div className="p-4 border rounded-md hover:border-primary cursor-pointer transition-colors">
                  <h5 className="font-medium mb-2">{t.premium}</h5>
                  <p className="text-xl font-bold mb-2">{currency.symbol}{calculatePrice(299)}<span className="text-sm font-normal text-muted-foreground">{t.month}</span></p>
                  <div className="space-y-2 mb-4">
                    <div className="flex items-center gap-2">
                      <span className="text-primary">‚úì</span>
                      <span className="text-sm">{t.advancedAnalytics}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <span className="text-primary">‚úì</span>
                      <span className="text-sm">{t.aiRecommendations}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <span className="text-primary">‚úì</span>
                      <span className="text-sm">{t.unlimitedHistory}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <span className="text-primary">‚úì</span>
                      <span className="text-sm">{t.noAds}</span>
                    </div>
                  </div>
                  <Button className="w-full" onClick={() => handleSubscribe("–ü—Ä–µ–º–∏—É–º")}>{t.subscribe}</Button>
                </div>

                <div className="p-4 border rounded-md hover:border-primary cursor-pointer transition-colors">
                  <h5 className="font-medium mb-2">{t.yearlyPlan}</h5>
                  <p className="text-xl font-bold mb-2">{currency.symbol}{calculatePrice(2499)}<span className="text-sm font-normal text-muted-foreground">{t.year}</span></p>
                  <Badge className="mb-2">{t.savings}</Badge>
                  <div className="space-y-2 mb-4">
                    <div className="flex items-center gap-2">
                      <span className="text-primary">‚úì</span>
                      <span className="text-sm">{t.allPremiumFeatures}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <span className="text-primary">‚úì</span>
                      <span className="text-sm">{t.prioritySupport}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <span className="text-primary">‚úì</span>
                      <span className="text-sm">{t.dataExport}</span>
                    </div>
                  </div>
                  <Button className="w-full" onClick={() => handleSubscribe("–ì–æ–¥–æ–≤–æ–π –ø–ª–∞–Ω")}>{t.subscribe}</Button>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="mb-6" id="language">
            <CardHeader>
              <CardTitle>{t.languageRegion}</CardTitle>
              <CardDescription>{t.customizeLanguage}</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <label htmlFor="language" className="text-sm font-medium">{t.appLanguage}</label>
                <select 
                  id="language" 
                  className="w-full px-3 py-2 rounded-md border border-input bg-background"
                  value={language}
                  onChange={(e) => setLanguage(e.target.value)}
                >
                  {languagesData.map((lang) => (
                    <option key={lang.code} value={lang.code}>
                      {lang.flag} {lang.name}
                    </option>
                  ))}
                </select>
              </div>

              <div className="space-y-2">
                <label htmlFor="region" className="text-sm font-medium">{t.region}</label>
                <select 
                  id="region" 
                  className="w-full px-3 py-2 rounded-md border border-input bg-background"
                  value={region}
                  onChange={(e) => setRegion(e.target.value)}
                >
                  {regionsData.map((reg) => (
                    <option key={reg.code} value={reg.code}>
                      {reg.name}
                    </option>
                  ))}
                </select>
              </div>

              <div className="space-y-2">
                <label htmlFor="timezone" className="text-sm font-medium">{t.timezone}</label>
                <select 
                  id="timezone" 
                  className="w-full px-3 py-2 rounded-md border border-input bg-background"
                  value={timezone}
                  onChange={(e) => setTimezone(e.target.value)}
                >
                  {timezonesData.map((tz) => (
                    <option key={tz.code} value={tz.code}>
                      {tz.name} ({tz.cities})
                    </option>
                  ))}
                </select>
              </div>
            </CardContent>
            <CardFooter>
              <Button onClick={handleSaveLanguage}>{t.saveSettings}</Button>
            </CardFooter>
          </Card>

          <Card id="help">
            <CardHeader>
              <CardTitle>{t.helpSupport}</CardTitle>
              <CardDescription>{t.getHelp}</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="p-4 border rounded-md hover:bg-muted/50 transition-colors cursor-pointer" onClick={() => handleSectionClick(t.supportCenter)}>
                <h4 className="font-medium mb-1">{t.supportCenter}</h4>
                <p className="text-sm text-muted-foreground">{t.faqInstructions}</p>
              </div>

              <div className="p-4 border rounded-md hover:bg-muted/50 transition-colors cursor-pointer" onClick={() => handleSectionClick(t.contactUs)}>
                <h4 className="font-medium mb-1">{t.contactUs}</h4>
                <p className="text-sm text-muted-foreground">{t.contactSupport}</p>
              </div>

              <div className="p-4 border rounded-md hover:bg-muted/50 transition-colors cursor-pointer" onClick={() => handleSectionClick(t.tutorials)}>
                <h4 className="font-medium mb-1">{t.tutorials}</h4>
                <p className="text-sm text-muted-foreground">{t.tutorialDescription}</p>
              </div>

              <div className="p-4 border rounded-md hover:bg-muted/50 transition-colors cursor-pointer" onClick={() => handleSectionClick(t.reportProblem)}>
                <h4 className="font-medium mb-1">{t.reportProblem}</h4>
                <p className="text-sm text-muted-foreground">{t.reportBugs}</p>
              </div>
            </CardContent>
            <CardFooter>
              <div className="text-sm text-muted-foreground">
                <p>{t.appVersion}</p>
              </div>
            </CardFooter>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default Settings;
